import following modules:
-argparse
-itertools
-numpy

def generate_index_dictionaries(index_file):
    '''This function takes in the index file as an argument and generates two dictionaries for use throughout this program.
    The first dictionary stores the index sequences as keys and the index numbers assigned to each sequence as values. The 
    second dictionary will be built from the first dictionary. Keys will be tuples of all index pair permutations (using itertools) 
    and values will be set to 0. Returns the two dictionaries.'''
    -open index_file and initialize dictionary (index_dict)
    -read file line by line and add index sequence as key to 'index_dict'; add index number as value
    -initialize new dictionary (index_permutations)
    -using itertools, populate dictionary keys with all permutations of index sequences (from 'index_dict'); set values to 0
    -close index file

    "Test:
    Input: Index Sequence   Index Number
           TCTTCGAC         C10
           TATGGCAC         B7
    Expected output: Dictionary 1: {'TCTTCGAC': C10, 'TATGGCAC': B7}
                     Dictionary 2: {('TCTTCGAC','TATGGCAC'):0,('TATGGCAC','TCTTCGAC'):0}"

    return both dictionaries (index_dict and index_permutations)

def rev_comp(input_sequence):
    '''This function serves to return the reverse complement of the "input_sequence" provided as argument.'''
    -reverse the sequence
    -translate each character to its complementary base

    "Test:
    Input: ATCG
    Expected output: CGAT"

    return reverse complement of "input_sequence"

def create_output_files(index_dict):
    '''This function takes in a dictionary (keys are 24 unique index sequences, values are index numbers for each)
    and generates a file handle for the forward and reverse output files for each matched index. Two additional files 
    are opened for each of the last categories: index hopping and unknown indexes. Total of 52 files are created.'''
    -iterate through key,value pairs in dictionary:
        -open file to write out to: name file handle as index number (value in dict) to be referenced later, name output file 
        as '<sequence>_<forward or reverse>.txt'
    -open 4 additional file handles for forward and reverse reads associated with index hopping or low quality/unknown indexes

    "Test:
    Input: {'TCTTCGAC': C10, 'TATGGCAC': B7}
    Expected output: The following file handles will be created: C10_forward, C10_reverse, B7_forward, B7_reverse; the following 
    output filenames will be created: 'TCTTCGAC_forward.txt','TCTTCGAC_reverse.txt','TATGGCAC_forward.txt','TATGGCAC_reverse.txt'"

    no return statement needed

def convert_phred(character):
    '''Function to convert from ASCII symbol to decimal equivalent, and subsequent conversion to phred score (-33).'''
    -use function "ord" to make conversion and subtract 33, store as variable

    "Test:
    Input: @
    Expected output: 31"

    return variable

##### Beginning of program (most likely will break down into additional functions) #####

-Generate index dictionaries (from function 'generate_index_dictionaries'); one ('index_dict') to reference for writing to output files and check if 
index read is known; the other ('permutations_dict') to keep count of instances of read pairs (matched and unmatched)
-Use function "create_output_files" to open files to write out to while parsing the input files
-Read in four FASTQ input files containing the sequence information (2 biological reads; 2 index reads):
    -initiate counter (for line count)
    -initialize 3 additional counters for keeping track of total number of matched, index-hopped, and unknown index pairs
    -initiate lists to hold record info for each read file (2 total; forward and reverse)
    -initiate two variables to False ('swapped' and 'unknown'; keeping track of current read pair index category)
    -Iterate over each line from one of the four files:
        -Read next line for the additional three files (each file's line should match in terms of line number)
        -if current line is sequence (modulo):
            -check if index1 and index2 are present as a key in 'index_dict' and subsequently for equivalence:
                -if one or both are not in 'index_dict', change 'unknown' to True; increment total unknown counter
                -if they are both known indexes, check equivalence of index1 and rev. comp. of index2 (function 'rev_comp'); if not 
                equivalent, change 'swapped' to True; increment total swapped counter
            -append each current read line to appropriate list; add index1 and index2 (rev comp!) sequence to header line already stored in 
            the lists; increment (index1,index2) key in 'permutations_dict' (unless 'unknown' is True!)
            -add 1 to line counter; continue to next line
        -elif the current line is quality scores (modulo):
            -append quality score lines to lists holding record info
            -if 'swapped' or 'unknown' is True:
                -write out full records to either index-hopped or unknown output files (depending on 'swapped' or 'unknown' designation)
                -reset swapped or unknown variables
            -else check average quality score of indexes (iterate over string and use 'convert_phred' function):
                -if avg score is < min threshold:
                    -increment unknown counter; output records info to unknown files
                -else increment matched counter; output records info to file specific to current matched index pair
            -add 1 to line counter
            -reset record lists
        -else:
            -append the current line for each read file to their respective lists
            -add 1 to line counter